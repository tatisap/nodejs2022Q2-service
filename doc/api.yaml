openapi: 3.0.0
info:
  title: 'Home Library Service'
  description: 'Home music library service'
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          description: 'Version of user updating'
          example: 1
        createdAt:
          type: number
          description: 'User creation timestamp'
          example: 1655000000
        updatedAt:
          type: number
          description: 'User updating timestamp'
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
        - year
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'The Show Must Go On'
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: 'Track duration in seconds'
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'

paths:
  /user:
    get:
      tags:
        - Users
      summary: 'Get all users'
      description: 'Gets all users'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: 'Create a user'
      description: 'Creates a new user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: 'The user login'
                  example: 'TestUser'
                password:
                  type: string
                  description: 'The user password'
                  example: '12345qwertY!'
              required:
                - login
                - password
      responses:
        201:
          description: 'The user has been created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad request. Body does not contain required fields or value types are invalid'
        422:
          description: 'Login has been taken'
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Users
      summary: 'Get a single user by id'
      description: 'Gets a single user by id'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Bad request. userId is invalid (not uuid)'
        404:
          description: 'User was not found'

    put:
      tags:
        - Users
      summary: 'Update user password'
      description: 'Updates user password by id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: 'User old password'
                  example: '12345qwertY!'
                newPassword:
                  type: string
                  description: 'User new password'
                  example: '12345qwertY&'
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: 'The user has been updated'
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: 'TestUser'
                  version:
                    type: integer
                    example: 2
                  createdAt:
                    type: integer
                    example: 1655000000
                  updatedAt:
                    type: integer
                    example: 1655999999
        400:
          description: 'Bad request. userId is invalid (not uuid) or body values are invalid'
        403:
          description: 'oldPassowrd is wrong'
        404:
          description: 'User was not found'

    delete:
      tags:
        - Users
      summary: 'Delete a user'
      description: 'Deletes a user by id'
      responses:
        204:
          description: 'The user has been deleted'
        400:
          description: 'Bad request. userId is invalid (not uuid)'
        404:
          description: 'User was not found'
  /track:
    get:
      tags:
        - Tracks
      summary: 'Get tracks list'
      description: 'Gets all library tracks list'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

    post:
      tags:
        - Tracks
      summary: 'Add a new track'
      description: 'Adds a new track information'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'The Show Must Go On'
                duration:
                  type: integer
                  description: 'Track duration in seconds'
                  example: 262
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - duration
      responses:
        201:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: 'Bad request. Body does not contain required fields or values are invalid or album and artist are not exist'

  /track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Tracks
      summary: 'Get a single track by id'
      description: 'Gets a single track by id'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: 'Bad request. trackId is invalid (not uuid)'
        404:
          description: 'Track was not found'
    put:
      tags:
        - Tracks
      summary: 'Update track information'
      description: 'Updates library track information by id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: 'Bohemian Rhapsody'
                duration:
                  type: integer
                  description: 'Track duration in seconds'
                  example: 355
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - duration
      responses:
        200:
          description: 'The track has been updated'
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: 'Bohemian Rhapsody'
                  duration:
                    type: integer
                    description: 'Track duration in seconds'
                    example: 355
                  artistId:
                    type: string
                    format: uuid
                    nullable: true
                  albumId:
                    type: string
                    format: uuid
                    nullable: true
        400:
          description: 'Bad request. trackId is invalid (not uuid) or body values are invalid or album and artist was not found'
        404:
          description: 'Track was not found'
    delete:
      tags:
        - Tracks
      summary: 'Delete a track'
      description: 'Deletes a track from library'
      responses:
        204:
          description: 'Deleted succesfully'
        400:
          description: 'Bad request. trackId is invalid (not uuid)'
        404:
          description: 'Track was not found'
  /album:
    get:
      tags:
        - Albums
      summary: 'Get albums list'
      description: 'Gets all library alibums list'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Albums
      summary: 'Add a new album'
      description: 'Adds a new album information'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: 'Innuendo'
                year:
                  type: integer
                  example: 1991
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        201:
          description: 'The album has been created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: 'Bad request. Body does not contain required fields or values are invalid'
  /album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Albums
      summary: 'Get a single album by id'
      description: 'Gets a single album by id'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: 'Bad request. albumId is invalid (not uuid)'
        404:
          description: 'Album was not found'
    put:
      tags:
        - Albums
      summary: 'Update album information'
      description: 'Updates library album information by id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: 'Renessance'
                year:
                  type: integer
                  example: 2022
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        200:
          description: 'The album has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: 'Bad request. albumId is invalid (not uuid) or values are invalid or artist was not found'
        404:
          description: 'Album was not found'
    delete:
      tags:
        - Albums
      summary: 'Delete an album'
      description: 'Delete an album from library'
      responses:
        204:
          description: 'Deleted succesfully'
        400:
          description: 'Bad request. albumId is invalid (not uuid)'
        404:
          description: 'Album was not found'
  /artist:
    get:
      tags:
        - Artists
      summary: 'Get all artists'
      description: 'Gets all artists'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artists
      summary: 'Add a new artist'
      description: 'Adds a new artist'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Freddie Mercury'
                grammy:
                  type: boolean
                  example: false
              required:
                - name
                - grammy
      responses:
        201:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: 'Bad request. Body does not contain required fields or values are invalid'
  /artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artists
      summary: 'Get a single artist by id'
      description: 'Gets a single artist by id'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: 'Bad request. artistId is invalid (not uuid)'
        404:
          description: 'Artist was not found'
    put:
      tags:
        - Artists
      summary: 'Update artist information'
      description: 'Updates artist information by id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Bob Dylan'
                grammy:
                  type: boolean
                  example: false
              required:
                - name
                - grammy
      responses:
        200:
          description: 'The artist has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: 'Bad request. artistId is invalid (not uuid) or values are invalid'
        404:
          description: 'Artist was not found'
    delete:
      tags:
        - Artists
      summary: 'Delete an artist'
      description: 'Deletes an artist from library'
      responses:
        204:
          description: 'Delelted succesfully'
        400:
          description: 'Bad request. artistId is invalid (not uuid)'
        404:
          description: 'Artist was not found'
  /favs:
    get:
      tags:
        - Favorites
      summary: 'Get all favorites'
      description: 'Gets all favorites albums, tracks and artists'
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: 'Add a track to the favorites'
      description: 'Adds a track to the favorites'
      responses:
        201:
          description: 'Track has been added to favorites'
        400:
          description: 'Bad request. trackId is invalid (not uuid)'
        422:
          description: 'Track with id does not exist'
    delete:
      tags:
        - Favorites
      summary: 'Delete a track from favorites'
      description: 'Deletes a track from favorites'
      responses:
        204:
          description: 'Deleted succesfully'
        400:
          description: 'Bad request. trackId is invalid (not uuid)'
        404:
          description: 'Track was not found'
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: 'Add an album to the favorites'
      description: 'Adds an album to the favorites'
      responses:
        201:
          description: 'Album has been added to favorites'
        400:
          description: 'Bad request. albumId is invalid (not uuid)'
        422:
          description: 'Album with id does not exist'
    delete:
      tags:
        - Favorites
      summary: 'Delete an album from favorites'
      description: 'Deletes an album from favorites'
      responses:
        204:
          description: 'Deleted succesfully'
        400:
          description: 'Bad request. albumId is invalid (not uuid)'
        404:
          description: 'Album was not found'
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: 'Add an artist to the favorites'
      description: 'Adds an artist to the favorites'
      responses:
        201:
          description: 'Artist has been added to favorites'
        400:
          description: 'Bad request. artistId is invalid (not uuid)'
        422:
          description: 'Artist with id does not exist'
    delete:
      tags:
        - Favorites
      summary: 'Delete an artist from favorites'
      description: 'Deletes an artist from favorites'
      responses:
        204:
          description: 'Deleted succesfully'
        400:
          description: 'Bad request. artistId is invalid (not uuid)'
        404:
          description: 'Artist was not found'
